// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/firmware.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2ffirmware_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2ffirmware_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace machinetalk {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ffirmware_2eproto();

class Connector;
class Firmware;

// ===================================================================

class Connector : public ::google::protobuf::Message {
 public:
  Connector();
  virtual ~Connector();

  Connector(const Connector& from);

  inline Connector& operator=(const Connector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connector& default_instance();

  void Swap(Connector* other);

  // implements Message ----------------------------------------------

  Connector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connector& from);
  void MergeFrom(const Connector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sfixed32 pins = 2;
  inline bool has_pins() const;
  inline void clear_pins();
  static const int kPinsFieldNumber = 2;
  inline ::google::protobuf::int32 pins() const;
  inline void set_pins(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:machinetalk.Connector)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pins();
  inline void clear_has_pins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 pins_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ffirmware_2eproto();

  void InitAsDefaultInstance();
  static Connector* default_instance_;
};
// -------------------------------------------------------------------

class Firmware : public ::google::protobuf::Message {
 public:
  Firmware();
  virtual ~Firmware();

  Firmware(const Firmware& from);

  inline Firmware& operator=(const Firmware& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Firmware& default_instance();

  void Swap(Firmware* other);

  // implements Message ----------------------------------------------

  Firmware* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Firmware& from);
  void MergeFrom(const Firmware& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string build_sha = 1;
  inline bool has_build_sha() const;
  inline void clear_build_sha();
  static const int kBuildShaFieldNumber = 1;
  inline const ::std::string& build_sha() const;
  inline void set_build_sha(const ::std::string& value);
  inline void set_build_sha(const char* value);
  inline void set_build_sha(const char* value, size_t size);
  inline ::std::string* mutable_build_sha();
  inline ::std::string* release_build_sha();
  inline void set_allocated_build_sha(::std::string* build_sha);

  // optional string fpga_part_number = 2;
  inline bool has_fpga_part_number() const;
  inline void clear_fpga_part_number();
  static const int kFpgaPartNumberFieldNumber = 2;
  inline const ::std::string& fpga_part_number() const;
  inline void set_fpga_part_number(const ::std::string& value);
  inline void set_fpga_part_number(const char* value);
  inline void set_fpga_part_number(const char* value, size_t size);
  inline ::std::string* mutable_fpga_part_number();
  inline ::std::string* release_fpga_part_number();
  inline void set_allocated_fpga_part_number(::std::string* fpga_part_number);

  // repeated .machinetalk.Connector connector = 3;
  inline int connector_size() const;
  inline void clear_connector();
  static const int kConnectorFieldNumber = 3;
  inline const ::machinetalk::Connector& connector(int index) const;
  inline ::machinetalk::Connector* mutable_connector(int index);
  inline ::machinetalk::Connector* add_connector();
  inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::Connector >&
      connector() const;
  inline ::google::protobuf::RepeatedPtrField< ::machinetalk::Connector >*
      mutable_connector();

  // optional sfixed32 num_leds = 4;
  inline bool has_num_leds() const;
  inline void clear_num_leds();
  static const int kNumLedsFieldNumber = 4;
  inline ::google::protobuf::int32 num_leds() const;
  inline void set_num_leds(::google::protobuf::int32 value);

  // optional string board_name = 5;
  inline bool has_board_name() const;
  inline void clear_board_name();
  static const int kBoardNameFieldNumber = 5;
  inline const ::std::string& board_name() const;
  inline void set_board_name(const ::std::string& value);
  inline void set_board_name(const char* value);
  inline void set_board_name(const char* value, size_t size);
  inline ::std::string* mutable_board_name();
  inline ::std::string* release_board_name();
  inline void set_allocated_board_name(::std::string* board_name);

  // optional string comment = 6;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 6;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:machinetalk.Firmware)
 private:
  inline void set_has_build_sha();
  inline void clear_has_build_sha();
  inline void set_has_fpga_part_number();
  inline void clear_has_fpga_part_number();
  inline void set_has_num_leds();
  inline void clear_has_num_leds();
  inline void set_has_board_name();
  inline void clear_has_board_name();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* build_sha_;
  ::std::string* fpga_part_number_;
  ::google::protobuf::RepeatedPtrField< ::machinetalk::Connector > connector_;
  ::std::string* board_name_;
  ::std::string* comment_;
  ::google::protobuf::int32 num_leds_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2ffirmware_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ffirmware_2eproto();

  void InitAsDefaultInstance();
  static Firmware* default_instance_;
};
// ===================================================================


// ===================================================================

// Connector

// optional string name = 1;
inline bool Connector::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connector::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connector::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connector::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Connector::name() const {
  // @@protoc_insertion_point(field_get:machinetalk.Connector.name)
  return *name_;
}
inline void Connector::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:machinetalk.Connector.name)
}
inline void Connector::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.Connector.name)
}
inline void Connector::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Connector.name)
}
inline ::std::string* Connector::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Connector.name)
  return name_;
}
inline ::std::string* Connector::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Connector::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Connector.name)
}

// optional sfixed32 pins = 2;
inline bool Connector::has_pins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connector::set_has_pins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connector::clear_has_pins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connector::clear_pins() {
  pins_ = 0;
  clear_has_pins();
}
inline ::google::protobuf::int32 Connector::pins() const {
  // @@protoc_insertion_point(field_get:machinetalk.Connector.pins)
  return pins_;
}
inline void Connector::set_pins(::google::protobuf::int32 value) {
  set_has_pins();
  pins_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Connector.pins)
}

// -------------------------------------------------------------------

// Firmware

// optional string build_sha = 1;
inline bool Firmware::has_build_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Firmware::set_has_build_sha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Firmware::clear_has_build_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Firmware::clear_build_sha() {
  if (build_sha_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_sha_->clear();
  }
  clear_has_build_sha();
}
inline const ::std::string& Firmware::build_sha() const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.build_sha)
  return *build_sha_;
}
inline void Firmware::set_build_sha(const ::std::string& value) {
  set_has_build_sha();
  if (build_sha_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_sha_ = new ::std::string;
  }
  build_sha_->assign(value);
  // @@protoc_insertion_point(field_set:machinetalk.Firmware.build_sha)
}
inline void Firmware::set_build_sha(const char* value) {
  set_has_build_sha();
  if (build_sha_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_sha_ = new ::std::string;
  }
  build_sha_->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.Firmware.build_sha)
}
inline void Firmware::set_build_sha(const char* value, size_t size) {
  set_has_build_sha();
  if (build_sha_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_sha_ = new ::std::string;
  }
  build_sha_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Firmware.build_sha)
}
inline ::std::string* Firmware::mutable_build_sha() {
  set_has_build_sha();
  if (build_sha_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_sha_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Firmware.build_sha)
  return build_sha_;
}
inline ::std::string* Firmware::release_build_sha() {
  clear_has_build_sha();
  if (build_sha_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_sha_;
    build_sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Firmware::set_allocated_build_sha(::std::string* build_sha) {
  if (build_sha_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_sha_;
  }
  if (build_sha) {
    set_has_build_sha();
    build_sha_ = build_sha;
  } else {
    clear_has_build_sha();
    build_sha_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Firmware.build_sha)
}

// optional string fpga_part_number = 2;
inline bool Firmware::has_fpga_part_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Firmware::set_has_fpga_part_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Firmware::clear_has_fpga_part_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Firmware::clear_fpga_part_number() {
  if (fpga_part_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fpga_part_number_->clear();
  }
  clear_has_fpga_part_number();
}
inline const ::std::string& Firmware::fpga_part_number() const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.fpga_part_number)
  return *fpga_part_number_;
}
inline void Firmware::set_fpga_part_number(const ::std::string& value) {
  set_has_fpga_part_number();
  if (fpga_part_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fpga_part_number_ = new ::std::string;
  }
  fpga_part_number_->assign(value);
  // @@protoc_insertion_point(field_set:machinetalk.Firmware.fpga_part_number)
}
inline void Firmware::set_fpga_part_number(const char* value) {
  set_has_fpga_part_number();
  if (fpga_part_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fpga_part_number_ = new ::std::string;
  }
  fpga_part_number_->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.Firmware.fpga_part_number)
}
inline void Firmware::set_fpga_part_number(const char* value, size_t size) {
  set_has_fpga_part_number();
  if (fpga_part_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fpga_part_number_ = new ::std::string;
  }
  fpga_part_number_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Firmware.fpga_part_number)
}
inline ::std::string* Firmware::mutable_fpga_part_number() {
  set_has_fpga_part_number();
  if (fpga_part_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fpga_part_number_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Firmware.fpga_part_number)
  return fpga_part_number_;
}
inline ::std::string* Firmware::release_fpga_part_number() {
  clear_has_fpga_part_number();
  if (fpga_part_number_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fpga_part_number_;
    fpga_part_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Firmware::set_allocated_fpga_part_number(::std::string* fpga_part_number) {
  if (fpga_part_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fpga_part_number_;
  }
  if (fpga_part_number) {
    set_has_fpga_part_number();
    fpga_part_number_ = fpga_part_number;
  } else {
    clear_has_fpga_part_number();
    fpga_part_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Firmware.fpga_part_number)
}

// repeated .machinetalk.Connector connector = 3;
inline int Firmware::connector_size() const {
  return connector_.size();
}
inline void Firmware::clear_connector() {
  connector_.Clear();
}
inline const ::machinetalk::Connector& Firmware::connector(int index) const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.connector)
  return connector_.Get(index);
}
inline ::machinetalk::Connector* Firmware::mutable_connector(int index) {
  // @@protoc_insertion_point(field_mutable:machinetalk.Firmware.connector)
  return connector_.Mutable(index);
}
inline ::machinetalk::Connector* Firmware::add_connector() {
  // @@protoc_insertion_point(field_add:machinetalk.Firmware.connector)
  return connector_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::machinetalk::Connector >&
Firmware::connector() const {
  // @@protoc_insertion_point(field_list:machinetalk.Firmware.connector)
  return connector_;
}
inline ::google::protobuf::RepeatedPtrField< ::machinetalk::Connector >*
Firmware::mutable_connector() {
  // @@protoc_insertion_point(field_mutable_list:machinetalk.Firmware.connector)
  return &connector_;
}

// optional sfixed32 num_leds = 4;
inline bool Firmware::has_num_leds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Firmware::set_has_num_leds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Firmware::clear_has_num_leds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Firmware::clear_num_leds() {
  num_leds_ = 0;
  clear_has_num_leds();
}
inline ::google::protobuf::int32 Firmware::num_leds() const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.num_leds)
  return num_leds_;
}
inline void Firmware::set_num_leds(::google::protobuf::int32 value) {
  set_has_num_leds();
  num_leds_ = value;
  // @@protoc_insertion_point(field_set:machinetalk.Firmware.num_leds)
}

// optional string board_name = 5;
inline bool Firmware::has_board_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Firmware::set_has_board_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Firmware::clear_has_board_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Firmware::clear_board_name() {
  if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_->clear();
  }
  clear_has_board_name();
}
inline const ::std::string& Firmware::board_name() const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.board_name)
  return *board_name_;
}
inline void Firmware::set_board_name(const ::std::string& value) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(value);
  // @@protoc_insertion_point(field_set:machinetalk.Firmware.board_name)
}
inline void Firmware::set_board_name(const char* value) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.Firmware.board_name)
}
inline void Firmware::set_board_name(const char* value, size_t size) {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  board_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Firmware.board_name)
}
inline ::std::string* Firmware::mutable_board_name() {
  set_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    board_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Firmware.board_name)
  return board_name_;
}
inline ::std::string* Firmware::release_board_name() {
  clear_has_board_name();
  if (board_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = board_name_;
    board_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Firmware::set_allocated_board_name(::std::string* board_name) {
  if (board_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete board_name_;
  }
  if (board_name) {
    set_has_board_name();
    board_name_ = board_name;
  } else {
    clear_has_board_name();
    board_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Firmware.board_name)
}

// optional string comment = 6;
inline bool Firmware::has_comment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Firmware::set_has_comment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Firmware::clear_has_comment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Firmware::clear_comment() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& Firmware::comment() const {
  // @@protoc_insertion_point(field_get:machinetalk.Firmware.comment)
  return *comment_;
}
inline void Firmware::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set:machinetalk.Firmware.comment)
}
inline void Firmware::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
  // @@protoc_insertion_point(field_set_char:machinetalk.Firmware.comment)
}
inline void Firmware::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:machinetalk.Firmware.comment)
}
inline ::std::string* Firmware::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comment_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:machinetalk.Firmware.comment)
  return comment_;
}
inline ::std::string* Firmware::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Firmware::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:machinetalk.Firmware.comment)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace machinetalk

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2ffirmware_2eproto__INCLUDED
