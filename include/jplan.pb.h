// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/jplan.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2fjplan_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2fjplan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fjplan_2eproto();

class JplanJoint;
class JplanCommand;

// ===================================================================

class JplanJoint : public ::google::protobuf::Message {
 public:
  JplanJoint();
  virtual ~JplanJoint();

  JplanJoint(const JplanJoint& from);

  inline JplanJoint& operator=(const JplanJoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JplanJoint& default_instance();

  void Swap(JplanJoint* other);

  // implements Message ----------------------------------------------

  JplanJoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JplanJoint& from);
  void MergeFrom(const JplanJoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double pos_cmd = 1;
  inline bool has_pos_cmd() const;
  inline void clear_pos_cmd();
  static const int kPosCmdFieldNumber = 1;
  inline double pos_cmd() const;
  inline void set_pos_cmd(double value);

  // optional double max_vel = 2;
  inline bool has_max_vel() const;
  inline void clear_max_vel();
  static const int kMaxVelFieldNumber = 2;
  inline double max_vel() const;
  inline void set_max_vel(double value);

  // optional double max_acc = 3;
  inline bool has_max_acc() const;
  inline void clear_max_acc();
  static const int kMaxAccFieldNumber = 3;
  inline double max_acc() const;
  inline void set_max_acc(double value);

  // optional bool enable = 4;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 4;
  inline bool enable() const;
  inline void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:pb.JplanJoint)
 private:
  inline void set_has_pos_cmd();
  inline void clear_has_pos_cmd();
  inline void set_has_max_vel();
  inline void clear_has_max_vel();
  inline void set_has_max_acc();
  inline void clear_has_max_acc();
  inline void set_has_enable();
  inline void clear_has_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double pos_cmd_;
  double max_vel_;
  double max_acc_;
  bool enable_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fjplan_2eproto();

  void InitAsDefaultInstance();
  static JplanJoint* default_instance_;
};
// -------------------------------------------------------------------

class JplanCommand : public ::google::protobuf::Message {
 public:
  JplanCommand();
  virtual ~JplanCommand();

  JplanCommand(const JplanCommand& from);

  inline JplanCommand& operator=(const JplanCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JplanCommand& default_instance();

  void Swap(JplanCommand* other);

  // implements Message ----------------------------------------------

  JplanCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JplanCommand& from);
  void MergeFrom(const JplanCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.JplanJoint joint = 2;
  inline int joint_size() const;
  inline void clear_joint();
  static const int kJointFieldNumber = 2;
  inline const ::pb::JplanJoint& joint(int index) const;
  inline ::pb::JplanJoint* mutable_joint(int index);
  inline ::pb::JplanJoint* add_joint();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::JplanJoint >&
      joint() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::JplanJoint >*
      mutable_joint();

  // @@protoc_insertion_point(class_scope:pb.JplanCommand)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::JplanJoint > joint_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fjplan_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fjplan_2eproto();

  void InitAsDefaultInstance();
  static JplanCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// JplanJoint

// optional double pos_cmd = 1;
inline bool JplanJoint::has_pos_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JplanJoint::set_has_pos_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JplanJoint::clear_has_pos_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JplanJoint::clear_pos_cmd() {
  pos_cmd_ = 0;
  clear_has_pos_cmd();
}
inline double JplanJoint::pos_cmd() const {
  // @@protoc_insertion_point(field_get:pb.JplanJoint.pos_cmd)
  return pos_cmd_;
}
inline void JplanJoint::set_pos_cmd(double value) {
  set_has_pos_cmd();
  pos_cmd_ = value;
  // @@protoc_insertion_point(field_set:pb.JplanJoint.pos_cmd)
}

// optional double max_vel = 2;
inline bool JplanJoint::has_max_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JplanJoint::set_has_max_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JplanJoint::clear_has_max_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JplanJoint::clear_max_vel() {
  max_vel_ = 0;
  clear_has_max_vel();
}
inline double JplanJoint::max_vel() const {
  // @@protoc_insertion_point(field_get:pb.JplanJoint.max_vel)
  return max_vel_;
}
inline void JplanJoint::set_max_vel(double value) {
  set_has_max_vel();
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:pb.JplanJoint.max_vel)
}

// optional double max_acc = 3;
inline bool JplanJoint::has_max_acc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JplanJoint::set_has_max_acc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JplanJoint::clear_has_max_acc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JplanJoint::clear_max_acc() {
  max_acc_ = 0;
  clear_has_max_acc();
}
inline double JplanJoint::max_acc() const {
  // @@protoc_insertion_point(field_get:pb.JplanJoint.max_acc)
  return max_acc_;
}
inline void JplanJoint::set_max_acc(double value) {
  set_has_max_acc();
  max_acc_ = value;
  // @@protoc_insertion_point(field_set:pb.JplanJoint.max_acc)
}

// optional bool enable = 4;
inline bool JplanJoint::has_enable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JplanJoint::set_has_enable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JplanJoint::clear_has_enable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JplanJoint::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool JplanJoint::enable() const {
  // @@protoc_insertion_point(field_get:pb.JplanJoint.enable)
  return enable_;
}
inline void JplanJoint::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:pb.JplanJoint.enable)
}

// -------------------------------------------------------------------

// JplanCommand

// repeated .pb.JplanJoint joint = 2;
inline int JplanCommand::joint_size() const {
  return joint_.size();
}
inline void JplanCommand::clear_joint() {
  joint_.Clear();
}
inline const ::pb::JplanJoint& JplanCommand::joint(int index) const {
  // @@protoc_insertion_point(field_get:pb.JplanCommand.joint)
  return joint_.Get(index);
}
inline ::pb::JplanJoint* JplanCommand::mutable_joint(int index) {
  // @@protoc_insertion_point(field_mutable:pb.JplanCommand.joint)
  return joint_.Mutable(index);
}
inline ::pb::JplanJoint* JplanCommand::add_joint() {
  // @@protoc_insertion_point(field_add:pb.JplanCommand.joint)
  return joint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::JplanJoint >&
JplanCommand::joint() const {
  // @@protoc_insertion_point(field_list:pb.JplanCommand.joint)
  return joint_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::JplanJoint >*
JplanCommand::mutable_joint() {
  // @@protoc_insertion_point(field_mutable_list:pb.JplanCommand.joint)
  return &joint_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2fjplan_2eproto__INCLUDED
