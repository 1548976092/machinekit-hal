/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3-dev at Thu Mar 16 16:47:33 2017. */

#ifndef PB_ROS_NPB_H_INCLUDED
#define PB_ROS_NPB_H_INCLUDED
#include <pb.h>

#include "machinetalk/protobuf/nanopb.npb.h"
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _pb_JointTrajectoryPoint {
    pb_size_t positions_count;
    double positions[10];
    pb_size_t velocities_count;
    double velocities[10];
    pb_size_t accelerations_count;
    double accelerations[10];
    pb_size_t effort_count;
    double effort[10];
    bool has_time_from_start;
    double time_from_start;
    bool has_duration;
    double duration;
    bool has_serial;
    uint32_t serial;
} pb_JointTrajectoryPoint;

typedef struct _pb_Time {
    bool has_secs;
    uint32_t secs;
    bool has_nsecs;
    uint32_t nsecs;
} pb_Time;

typedef struct _pb_Header {
    bool has_seq;
    uint32_t seq;
    bool has_stamp;
    pb_Time stamp;
    bool has_frame_id;
    char frame_id[20];
} pb_Header;

typedef struct _pb_JointTrajectory {
    bool has_header;
    pb_Header header;
    pb_callback_t joint_names;
    pb_callback_t points;
} pb_JointTrajectory;

/* Default values for struct fields */

/* Initializer values for message structs */
#define pb_Time_init_default                     {false, 0, false, 0}
#define pb_Header_init_default                   {false, 0, false, pb_Time_init_default, false, ""}
#define pb_JointTrajectoryPoint_init_default     {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, false, 0, false, 0}
#define pb_JointTrajectory_init_default          {false, pb_Header_init_default, {{NULL}, NULL}, {{NULL}, NULL}}
#define pb_Time_init_zero                        {false, 0, false, 0}
#define pb_Header_init_zero                      {false, 0, false, pb_Time_init_zero, false, ""}
#define pb_JointTrajectoryPoint_init_zero        {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, false, 0, false, 0, false, 0}
#define pb_JointTrajectory_init_zero             {false, pb_Header_init_zero, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define pb_JointTrajectoryPoint_positions_tag    1
#define pb_JointTrajectoryPoint_velocities_tag   2
#define pb_JointTrajectoryPoint_accelerations_tag 3
#define pb_JointTrajectoryPoint_effort_tag       4
#define pb_JointTrajectoryPoint_time_from_start_tag 5
#define pb_JointTrajectoryPoint_duration_tag     7
#define pb_JointTrajectoryPoint_serial_tag       8
#define pb_Time_secs_tag                         1
#define pb_Time_nsecs_tag                        2
#define pb_Header_seq_tag                        1
#define pb_Header_stamp_tag                      2
#define pb_Header_frame_id_tag                   3
#define pb_JointTrajectory_header_tag            1
#define pb_JointTrajectory_joint_names_tag       2
#define pb_JointTrajectory_points_tag            3

/* Struct field encoding specification for nanopb */
extern const pb_field_t pb_Time_fields[3];
extern const pb_field_t pb_Header_fields[4];
extern const pb_field_t pb_JointTrajectoryPoint_fields[8];
extern const pb_field_t pb_JointTrajectory_fields[4];

/* Maximum encoded size of messages (where known) */
#define pb_Time_size                             12
#define pb_Header_size                           42
#define pb_JointTrajectoryPoint_size             384

/* helper macros for message type ids if set with */
/* option (nanopb_msgopt).msgid = <id>; */

#ifdef PB_MSGID
#define PB_MSG_371 pb_Time
#define PB_MSG_372 pb_Header
#define PB_MSG_373 pb_JointTrajectoryPoint
#define PB_MSG_374 pb_JointTrajectory

#define ROS_MESSAGES \
	PB_MSG(371,12,pb_Time) \
	PB_MSG(372,42,pb_Header) \
	PB_MSG(373,384,pb_JointTrajectoryPoint) \
	PB_MSG(374,-1,pb_JointTrajectory) \

#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
